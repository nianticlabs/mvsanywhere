variables:
  GCP_PROJECT: "niantic-masala"
  GCP_REPOSITORY_NAME: "research-docker"
  RELEASE_IMG_PATH: "europe-west4-docker.pkg.dev/${GCP_PROJECT}/${GCP_REPOSITORY_NAME}/mdp"

stages:
  - static-analysis
  - build
  - type-check
  - test
  - coverage
  - publish

#
# YAML Templates
#

.cloud_sdk: &cloud_sdk
  image: google/cloud-sdk:latest
  tags:
    - niantic-masala
    - cloud
    - cpu

.conda: &conda
  image: '${RELEASE_IMG_PATH}:${CI_COMMIT_SHA}'
  variables:
    CUDA_VISIBLE_DEVICES: "0"
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"

#
# Static Analysis stage
#

absolute_imports:
  stage: static-analysis
  image: python:3.9.7
  script:
    - make -f Makefile absolute-imports
  tags:
    - niantic-masala
    - cloud
    - cpu-small

black:
  stage: static-analysis
  image: python:3.9.7
  script:
  - pip install black==23.1.0
  - make -f Makefile black
  tags:
    - niantic-masala
    - cloud
    - cpu-small

isort:
  stage: static-analysis
  image: python:3.9.7
  script:
  - pip install isort==5.10.1
  - make -f Makefile isort
  tags:
    - niantic-masala
    - cloud
    - cpu-small


#
# Build stage
#

.docker_buildkit: &docker_buildkit
  image: docker:24.0-git
  services:
    - docker:24.0-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_BUILDKIT: "1"
  before_script:
    - apk update
    - apk add --no-cache make curl ca-certificates tar python3
    - curl -sLO --fail-with-body --retry-all-errors --retry 2 https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-410.0.0-linux-x86_64.tar.gz
    - tar -xf google-cloud-cli-410.0.0-linux-x86_64.tar.gz
    - ./google-cloud-sdk/install.sh -q --path-update true
    - export PATH="./google-cloud-sdk/bin/:${PATH}"
    - gcloud auth activate-service-account "${GOOGLE_SA}" --key-file="${GOOGLE_SA_FILE}"
    - cat "${DOCKER_SA_FILE}" | docker login -u _json_key --password-stdin https://europe-west4-docker.pkg.dev
  tags:
    - niantic-masala
    - cloud
    - cpu

docker_images:
  stage: build
  <<: *docker_buildkit
  rules:
    - if: ( $CI_PIPELINE_SOURCE != "schedule" ) && $CI_COMMIT_BRANCH
  script:
    - make -f Makefile docker-build
    - make -f Makefile docker-push

#
# Type Check stage
#

mypy:
  <<: *conda
  stage: type-check
  allow_failure: true
  script:
  - make -f Makefile mypy-all
  tags:
    - niantic-masala
    - cloud
    - cpu-small

tag_latest:
  stage: publish
  resource_group: docker_production
  <<: *cloud_sdk
  rules:
    - if: ($CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE != "schedule")
  script:
    - gcloud auth activate-service-account "${GOOGLE_SA}" --key-file="${GOOGLE_SA_FILE}"
    - gcloud artifacts docker tags add "${RELEASE_IMG_PATH}:${CI_COMMIT_SHA}" "${RELEASE_IMG_PATH}:latest"
    - gcloud artifacts docker tags add "${RELEASE_TOOLING_IMG_PATH}:${CI_COMMIT_SHA}" "${RELEASE_TOOLING_IMG_PATH}:latest"
